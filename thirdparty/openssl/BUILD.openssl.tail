cc_library(
    name = "crypto-textual-hdrs",
    textual_hdrs = [
        "crypto/des/ncbc_enc.c",
        "crypto/LPdir_unix.c",
    ],
)

cc_binary(
    name = "openssl",
    srcs = OPENSSL_APP_SRCS + [
        "apps/apps.h",
        "apps/progs.h",
        "apps/s_apps.h",
        "apps/testdsa.h",
        "apps/testrsa.h",
        "apps/timeouts.h",
    ] + glob(["include/internal/*.h"]),
    copts = [
        "-iquote",
        "$(GENDIR)/external/org_openssl/apps",
        "-I",
        "external/org_openssl/include",
    ],
    visibility = ["//visibility:public"],
    deps = [":ssl"],
)

OPENSSL_COPTS = [
    # As described in https://github.com/openssl/openssl/issues/4575, OpenSSL doesn't mark its
    # assembly files as not requiring an executable stack. Pass --noexecstack to the assembler
    # to do this.
    "-Wa,--noexecstack",
    "-iquote",
    "$(GENDIR)/external/org_openssl/crypto",
    "-I",
    "external/org_openssl",
    "-I",
    "external/org_openssl/include",
    "-I",
    "external/org_openssl/crypto",
    "-I",
    "external/org_openssl/crypto/modes",
    "-I",
    "external/org_openssl/crypto/include",
    "-iquote",
    "external/org_openssl/crypto/ec/curve448/arch_32",
    "-iquote",
    "external/org_openssl/crypto/ec/curve448",
    "-I",
    "$(GENDIR)/external/org_openssl/crypto/include",
] + OPENSSL_DEFINES + [
    # This hardcoded path into the system mean we will find the system certs. Note Debian sets
    # OPENSSLDIR=/usr/lib/ssl, but /usr/lib/ssl mostly consists of symlinks into /etc/ssl. We
    # must set /etc/ssl here because some environments (e.g., YSS root filesystems) don't have
    # /usr/lib/ssl at all.
    "-DOPENSSLDIR=\\\"/etc/ssl\\\"",
    # This is basically a no-op, since we've disabled dynamic loading of engines.
    '-DENGINESDIR=\\"/usr/lib/engines-1.1\\"',
    "-DL_ENDIAN",
    "-DOPENSSL_USE_NODELETE",
]

cc_library(
    name = "crypto",
    srcs = LIBCRYPTO_SRCS + glob([
        "crypto/*.h",
        "crypto/**/*.h",
        "include/internal/*.h",
    ]) + [
        "crypto/buildinf.h",
        "include/crypto/dso_conf.h",
        "e_os.h",
    ],
    hdrs = glob([
        "include/openssl/*.h",
        "include/crypto/*.h",
    ]) + [
        "include/openssl/opensslconf.h",
        "include/crypto/bn_conf.h",
        "include/crypto/dso_conf.h",
    ],
    copts = OPENSSL_COPTS,
    linkopts = [
        "-pthread",
    ],
    strip_include_prefix = "include",
    visibility = ["//visibility:public"],
    deps = [":crypto-textual-hdrs"],
)

cc_library(
    name = "ssl",
    srcs = LIBSSL_SRCS + glob(["ssl/**/*.h"]) + [
        "e_os.h",
    ],
    copts = OPENSSL_COPTS,
    visibility = ["//visibility:public"],
    deps = [
        ":crypto",
    ],
)

alias(
    name = "crypto_ssl",
    actual = ":ssl",
    visibility = ["//visibility:public"],
)

genrule(
    name = "asm",
    srcs = [
        "crypto/ec/ecp_nistz256_table.c",
    ],
    outs = PERLASM_OUTS,
    cmd = PERLASM_GEN,
    toolchains = ["@bazel_tools//tools/cpp:current_cc_toolchain"],
    tools = depset(direct = PERLASM_TOOLS).to_list() + glob(["crypto/perlasm/*.pl"]),
)

genrule(
    name = "generate-headers",
    outs = [
        "crypto/buildinf.h",
        "include/crypto/dso_conf.h",
        "include/crypto/bn_conf.h",
        "include/openssl/opensslconf.h",
        "apps/progs.h",
    ],
    cmd = """
cat <<'E_O_F' >$(location crypto/buildinf.h)
static const char compiler_flags[] = {'\\0'};
#define PLATFORM "platform: linux-x86_64"
#define DATE "__REDACTED__"
E_O_F

cat <<'E_O_F' >$(location include/crypto/bn_conf.h)
%s
E_O_F
cat <<'E_O_F' >$(location include/crypto/dso_conf.h)
%s
E_O_F
cat <<'E_O_F' >$(location include/openssl/opensslconf.h)
%s
E_O_F
cat <<'E_O_F' >$(location apps/progs.h)
%s
E_O_F
""" % (BN_CONF_H, DSO_CONF_H, OPENSSLCONF_H, APPS_PROGS_H),
)
