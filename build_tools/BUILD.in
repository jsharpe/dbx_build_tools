package(default_visibility = ["//visibility:public"])

load("//build_tools/bazel:config.bzl", "dbx_string_value")
load("//build_tools/bazel:pkg.bzl", "dbx_pkg_sqfs")
load("//build_tools/sh:sh.bzl", "dbx_sh_binary")
load("//build_tools/py:py.bzl", "dbx_py_dbx_test")

config_setting(
    name = "use-drte-v3",
    values = {
        "crosstool_top": "@drte_v3_build_sysroot//:drte-v3",
    },
)

config_setting(
    name = "use-asan",
    values = {
        "define": "sanitize=address",
    },
)

dbx_string_value(
    name = "sanitizer",
    value = select({
        ":use-asan": "define-asan",
        "//conditions:default": "define-none",
    }),
)

config_setting(
    name = "services-verbose",
    values = {
        "define": "svc.verbose=1",
    },
)

config_setting(
    name = "noservices-verbose",
    values = {
        "define": "svc.verbose=0",
    },
)

# Used internally by Changes to not create a version file. This is so that tests are remote-cachable
# Do not set this by hand
config_setting(
    name = "services-version-file",
    values = {
        "define": "svc.version-file=1",
    },
)

config_setting(
    name = "noservices-version-file",
    values = {
        "define": "svc.version-file=0",
    },
)

config_setting(
    name = "pyannotate-plugin",
    define_values = {
        "pyannotate-plugin": "1",
    },
)

config_setting(
    name = "coverage-enabled",
    values = {
        "collect_code_coverage": "true",
    },
)

config_setting(
    name = "dbxperf-plugin",
    define_values = {
        "profile-pytest": "1",
    },
)

config_setting(
    name = "vscode_python_debugging",
    define_values = {
        "vscode_python_debugging": "1",
    },
)

dbx_string_value(
    name = "py_link_dynamic_libs",
    # Cannot be overridden in rSERVER.
    value = "disallowed",
)

config_setting(
    name = "no_py_debug_prefix_map",
    define_values = {
        "py-debug-prefix-map": "0",
    },
)

dbx_string_value(
    name = "py_debug_prefix_map_supported",
    value = select({
        ":no_py_debug_prefix_map": "off",
        "//conditions:default": "yes",
    }),
)

dbx_py_library(
    name = "atomic",
    srcs = [
        "atomic.py",
    ],
    python2_compatible = True,
    python3_compatible = True,
)

dbx_py_library(
    name = "bazel_utils",
    srcs = [
        "bazel_utils.py",
        "npm_utils.py",
    ],
    python2_compatible = True,
    python3_compatible = True,
)

dbx_py_pytest_test(
    name = "npm_utils_tests",
    srcs = [
        "npm_utils_tests.py",
    ],
    python3_compatible = True,
)

dbx_py_library(
    name = "bazelpkg",
    srcs = ["bazelpkg.py"],
    python2_compatible = True,
    python3_compatible = True,
)

dbx_py_dbx_test(
    name = "bazel_utils_tests",
    srcs = ["bazel_utils_tests.py"],
    extra_args = [
        "$RUNFILES/build_tools/bazel_utils_tests.py",
        "--junitxml",
        "${XML_OUTPUT_FILE:-/dev/null}",
    ],
    pip_main = "@dbx_build_tools//pip/pytest",
    python3_compatible = True,
    deps = [
        ":bazel_utils",
        "@dbx_build_tools//pip/pytest",
    ],
)

py_library(
    name = "build_parser_lib",
    srcs = [
        "build_parser.py",
    ],
    # This must not have further dependencies.
    deps = [],
)

dbx_py_pytest_test(
    name = "build_parser_tests",
    srcs = ["build_parser_tests.py"],
)

dbx_sh_binary(
    name = "buildfmt",
    srcs = ["buildfmt.sh"],
    data = [
        "buildifier.json",
        "//go/src/github.com/bazelbuild/buildtools/buildifier",
    ],
)

dbx_py_binary(
    name = "bzl",
    srcs = [
        "bzl.py",
    ],
    main = "bzl.py",
    python2_compatible = False,
)

dbx_py_binary(
    name = "bzl-gen",
    srcs = [
        "bzl-gen.py",
    ],
    main = "bzl-gen.py",
    python2_compatible = False,
)

dbx_pkg_sqfs(
    name = "bzl.sqfs",
    data = [
        ":bzl",
        ":bzl-gen",
    ],
    release_tests = ["//build_tools/bzl_lib/..."],
)

cc_binary(
    name = "pass_binary",
    srcs = ["exit0.c"],
)

cc_test(
    name = "pass",
    srcs = ["exit0.c"],
)

dbx_sh_binary(
    name = "run_under_nothing",
    srcs = ["run_under_nothing.sh"],
)

sh_binary(
    name = "wait",
    srcs = ["wait.sh"],
)

sh_binary(
    name = "parse_workspace_status",
    srcs = ["parse_workspace_status.sh"],
)

dbx_py_binary(
    name = "stdin_to_junit",
    main = "stdin_to_junit.py",
    python2_compatible = False,
    python3_compatible = True,
)

py_binary(
    name = "chronic",
    srcs = ["chronic.py"],
    main = "chronic.py",
    python_version = "PY3",
)

dbx_py_library(
    name = "whatpyver_lib",
    srcs = ["whatpyver.py"],
    # This must not have further dependencies.
    autogen_deps = False,
    python2_compatible = True,
    deps = [":build_parser_lib"],
)

dbx_py_binary(
    name = "whatpyver",
    srcs = ["whatpyver.py"],
    main = "whatpyver.py",
    python2_compatible = False,
)

exports_files(["exit0.sh"])
